{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  // Gets all books\n  getBooks: function () {\n    return axios.get(\"/api/books\");\n  },\n  // Gets the book with the given id\n  getBook: function (id) {\n    return axios.get(\"/api/books/\" + id);\n  },\n  // Deletes the book with the given id\n  deleteBook: function (id) {\n    return axios.delete(\"/api/books/\" + id);\n  },\n  // Saves a book to the database\n  saveBook: async function (bookData) {\n    let exists = await axios.get(\"/api/books/\" + bookData.id);\n    console.log(bookData);\n    console.log(exists);\n\n    if (!exists.data) {\n      await axios.post(\"/api/books\", bookData);\n      return {\n        message: \"Book saved.\"\n      };\n    } else {\n      return {\n        message: \"Book already saved.\"\n      };\n    }\n  },\n  // Gets all books\n  searchBooks: async function (query) {\n    let data = (await axios.get(`https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(query)}`)).data.items; //console.log(data);\n\n    let books = [];\n\n    for (let book of data) {\n      books.push({\n        id: book.id,\n        title: book.volumeInfo.title,\n        authors: book.volumeInfo.authors,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks ? book.volumeInfo.imageLinks.thumbnail : \"https://books.google.ca/googlebooks/images/no_cover_thumb.gif\",\n        link: book.volumeInfo.infoLink\n      });\n    }\n\n    console.log(books);\n    return books;\n  }\n};","map":{"version":3,"sources":["/Users/ianasqazi/UoT-Assignments/google-books-search-react/client/src/utils/API.js"],"names":["axios","getBooks","get","getBook","id","deleteBook","delete","saveBook","bookData","exists","console","log","data","post","message","searchBooks","query","encodeURIComponent","items","books","book","push","title","volumeInfo","authors","description","image","imageLinks","thumbnail","link","infoLink"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe;AACb;AACAC,EAAAA,QAAQ,EAAE,YAAW;AACnB,WAAOD,KAAK,CAACE,GAAN,CAAU,YAAV,CAAP;AACD,GAJY;AAKb;AACAC,EAAAA,OAAO,EAAE,UAASC,EAAT,EAAa;AACpB,WAAOJ,KAAK,CAACE,GAAN,CAAU,gBAAgBE,EAA1B,CAAP;AACD,GARY;AASb;AACAC,EAAAA,UAAU,EAAE,UAASD,EAAT,EAAa;AACvB,WAAOJ,KAAK,CAACM,MAAN,CAAa,gBAAgBF,EAA7B,CAAP;AACD,GAZY;AAab;AACAG,EAAAA,QAAQ,EAAE,gBAAeC,QAAf,EAAyB;AACjC,QAAIC,MAAM,GAAG,MAAMT,KAAK,CAACE,GAAN,CAAU,gBAAgBM,QAAQ,CAACJ,EAAnC,CAAnB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,QAAI,CAACA,MAAM,CAACG,IAAZ,EAAkB;AAChB,YAAMZ,KAAK,CAACa,IAAN,CAAW,YAAX,EAAyBL,QAAzB,CAAN;AACA,aAAO;AAAEM,QAAAA,OAAO,EAAE;AAAX,OAAP;AACD,KAHD,MAGO;AACL,aAAO;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAAP;AACD;AACF,GAxBY;AAyBb;AACAC,EAAAA,WAAW,EAAE,gBAAeC,KAAf,EAAsB;AACjC,QAAIJ,IAAI,GAAG,CAAC,MAAMZ,KAAK,CAACE,GAAN,CAAW,iDAAgDe,kBAAkB,CAACD,KAAD,CAAQ,EAArF,CAAP,EAAgGJ,IAAhG,CAAqGM,KAAhH,CADiC,CAEjC;;AACA,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,IAAT,IAAiBR,IAAjB,EAAuB;AACrBO,MAAAA,KAAK,CAACE,IAAN,CAAW;AACTjB,QAAAA,EAAE,EAAEgB,IAAI,CAAChB,EADA;AAETkB,QAAAA,KAAK,EAAEF,IAAI,CAACG,UAAL,CAAgBD,KAFd;AAGTE,QAAAA,OAAO,EAAEJ,IAAI,CAACG,UAAL,CAAgBC,OAHhB;AAITC,QAAAA,WAAW,EAAEL,IAAI,CAACG,UAAL,CAAgBE,WAJpB;AAKTC,QAAAA,KAAK,EAAEN,IAAI,CAACG,UAAL,CAAgBI,UAAhB,GAA6BP,IAAI,CAACG,UAAL,CAAgBI,UAAhB,CAA2BC,SAAxD,GAAoE,+DALlE;AAMTC,QAAAA,IAAI,EAAET,IAAI,CAACG,UAAL,CAAgBO;AANb,OAAX;AAQD;;AACDpB,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACA,WAAOA,KAAP;AACD;AA1CY,CAAf","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  // Gets all books\n  getBooks: function() {\n    return axios.get(\"/api/books\");\n  },\n  // Gets the book with the given id\n  getBook: function(id) {\n    return axios.get(\"/api/books/\" + id);\n  },\n  // Deletes the book with the given id\n  deleteBook: function(id) {\n    return axios.delete(\"/api/books/\" + id);\n  },\n  // Saves a book to the database\n  saveBook: async function(bookData) {\n    let exists = await axios.get(\"/api/books/\" + bookData.id);\n    console.log(bookData);\n    console.log(exists);\n    if (!exists.data) {\n      await axios.post(\"/api/books\", bookData)\n      return { message: \"Book saved.\" };\n    } else {\n      return { message: \"Book already saved.\" };\n    }\n  },\n  // Gets all books\n  searchBooks: async function(query) {\n    let data = (await axios.get(`https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(query)}`)).data.items;\n    //console.log(data);\n    let books = [];\n    for (let book of data) {\n      books.push({\n        id: book.id,\n        title: book.volumeInfo.title,\n        authors: book.volumeInfo.authors,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks ? book.volumeInfo.imageLinks.thumbnail : \"https://books.google.ca/googlebooks/images/no_cover_thumb.gif\",\n        link: book.volumeInfo.infoLink\n      });\n    }\n    console.log(books);\n    return books;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}